generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admins {
  admin_id     Int      @id @default(autoincrement())
  name         String?  @db.VarChar
  family_name  String?  @db.VarChar
  email        String?  @unique @db.VarChar
  isSuperAdmin Boolean?
  password     String?  @db.VarChar
  blocked      Boolean  @default(false)
  salary       Float    @default(30000)
  Token        Token[]
  Reply        Reply[]
}

model AgentsMaintenance {
  agent_id        Int               @id @default(autoincrement())
  email           String?           @unique(map: "agent_unique_email") @db.VarChar
  phone_number    String?           @db.VarChar
  password        String?           @db.VarChar
  family_name     String?           @db.VarChar
  name            String?           @db.VarChar
  blocked         Boolean           @default(false)
  salary          Float             @default(20000)
  NotificationsAM NotificationsAM[]
  Task            Task[]
  Token           Token[]
  Vehicules       Vehicules[]
  DemandesSupport DemandesSupport[]
}

model Decideurs {
  decideur_id  Int     @id @default(autoincrement())
  name         String? @db.VarChar
  family_name  String? @db.VarChar
  phone_number String? @db.VarChar
  email        String? @unique @db.VarChar
  password     String? @db.VarChar
  blocked      Boolean @default(false)
  salary       Float   @default(40000)

  Token        Token[]
}

model DemandesInscription {
  demande_id   Int                          @id @default(autoincrement())
  locataire_id Int?                         @unique(map: "demande_unique_locataire")
  date_demande DateTime?                    @default(now()) @db.Timestamp(6)
  etat_demande EtatDemande                  @default(PENDING)
  locataire    Locataires?                  @relation(fields: [locataire_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  rejected     DemandesInscriptionRejected?
}

enum EtatDemande {
  PENDING
  VALIDATED
  REJECTED
}

model DemandesInscriptionRejected {
  demande_id          Int                 @id @default(autoincrement())
  justificatif        String?             @db.VarChar
  DemandesInscription DemandesInscription @relation(fields: [demande_id], references: [demande_id], onDelete: NoAction, onUpdate: NoAction)
}

model DemandesSupport {
  demande_id        Int                @id @default(autoincrement())
  locataire_id      Int?
  agent_id          Int?
  vehicule_id       Int?
  type_support      TypeSupport        @default(Autres)
  message           String?            @db.VarChar
  read              Boolean?           @default(false)
  date_demande      DateTime?          @default(now()) @db.Timestamp(6)
  Locataires        Locataires?        @relation(fields: [locataire_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  AgentsMaintenance AgentsMaintenance? @relation(fields: [agent_id], references: [agent_id], onDelete: Cascade, onUpdate: NoAction)
  Vehicules         Vehicules?         @relation(fields: [vehicule_id], references: [vehicule_id], onDelete: Cascade, onUpdate: NoAction)
  Reply             Reply[]
}

enum TypeSupport {
  Batterie
  Demarreur
  Amortisseurs
  Vitesses
  Moteur
  Bruits
  Freinage
  Climatisation
  Autres
}

model Reply {
  reply_id        Int              @id @default(autoincrement())
  demande_id      Int?
  locataire_id    Int?
  admin_id        Int?
  message         String?          @db.VarChar
  Locataires      Locataires?      @relation(fields: [locataire_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  DemandesSupport DemandesSupport? @relation(fields: [demande_id], references: [demande_id], onDelete: Cascade, onUpdate: NoAction)
  Admins          Admins?          @relation(fields: [admin_id], references: [admin_id], onDelete: Cascade, onUpdate: NoAction)

}

model Refund {
  refund_id  Int      @id @default(autoincrement())
  paiment_id Int?
  paiment    Paiment? @relation(fields: [paiment_id], references: [paiment_id], onDelete: NoAction, onUpdate: NoAction)
  amount     Int?

}

model Locataires {
  id                     Int                      @id @default(autoincrement())
  email                  String?                  @unique(map: "locataire_email_unique") @db.VarChar
  phone_number           String?                  @db.VarChar
  password               String?                  @db.VarChar
  photo_identity         String?                  @db.VarChar
  personal_photo         String?                  @db.VarChar
  family_name            String?                  @db.VarChar
  name                   String?                  @db.VarChar
  validated              Boolean?                 @default(false)
  blocked                Boolean                  @default(false)
  DemandesInscription    DemandesInscription?
  Reservations           Reservations[]
  DemandesSupport        DemandesSupport[]
  NotificationsLocataire NotificationsLocataire[]
  Token                  Token[]
  Reply                  Reply[]
}

model NotificationsAM {
  notif_id          Int                @id @default(autoincrement())
  agent_id          Int?
  date_notif        DateTime?          @db.Timestamp(6)
  titre             String?            @db.VarChar
  message           String?            @db.VarChar
  AgentsMaintenance AgentsMaintenance? @relation(fields: [agent_id], references: [agent_id], onDelete: NoAction, onUpdate: NoAction)
}

model NotificationsLocataire {
  notif_id     Int         @id @default(autoincrement())
  locataire_id Int?
  date_notif   DateTime?   @db.Date
  titre        String?     @db.VarChar
  message      String?     @db.VarChar
  Locataires   Locataires? @relation(fields: [locataire_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Paiment {
  paiment_id      Int           @id @default(autoincrement())
  reservation_id  Int?
  estimated_price Float?
  real_price      Float?        @default(0)
  date_paiment    DateTime?     @default(now()) @db.Timestamp(6)
  type_paiment    Int?
  refunds         Refund[]
  TypePaiment     TypePaiment?  @relation(fields: [type_paiment], references: [type_id], onDelete: NoAction, onUpdate: NoAction)
  Reservations    Reservations? @relation(fields: [reservation_id], references: [reservation_id], onDelete: NoAction, onUpdate: NoAction)
}

model Panne {
  panne_id    Int        @id @default(autoincrement())
  vehicule_id Int?
  charge      Float?
  date_panne  DateTime?  @db.Timestamp(6)
  temperature Float?
  blocked     Boolean?
  treated     Boolean?
  Vehicules   Vehicules? @relation(fields: [vehicule_id], references: [vehicule_id], onDelete: NoAction, onUpdate: NoAction)
}

model Task {
  task_id           Int                @id @default(autoincrement())
  agent_id          Int?
  date              DateTime?          @default(now()) @map("_date") @db.Date
  description       String?            @db.VarChar
  completed         Boolean?           @default(false)
  progress          Int?               @default(0)
  important         Boolean            @default(false)
  AgentsMaintenance AgentsMaintenance? @relation(fields: [agent_id], references: [agent_id], onDelete: NoAction, onUpdate: NoAction)
}

model Reservations {
  reservation_id     Int                 @id @default(autoincrement())
  locataire_id       Int
  vehicule_id        Int
  code               String?
  etat               EtatReservation?    @default(INVALIDE)
  departLat          Float?
  departLong         Float?
  destLat            Float?
  destLong           Float?
  date_reservation   DateTime            @default(now())
  real_start_course  DateTime?
  real_end_course    DateTime?
  locataire          Locataires?         @relation(fields: [locataire_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  vehicule           Vehicules?          @relation(fields: [vehicule_id], references: [vehicule_id], onDelete: NoAction, onUpdate: NoAction)
  Paiment            Paiment[]
  reservation_region ReservationRegion[]
}

enum EtatReservation {
  INVALIDE
  ENCOURS
  COMPLETED
  REJECTED
}

model TypePaiment {
  type_id     Int       @id @default(autoincrement())
  description String?   @db.VarChar
  Paiment     Paiment[]
}

model Vehicules {
  vehicule_id            Int                      @id @default(autoincrement())
  matricule              String                   @unique(map: "unique_matricule")
  car_photo              String?
  responsable            Int?
  type_vehicule          Int?
  kilometrage            Float                    @default(0.0)
  etat                   VehicleState             @default(WORKING)
  disponible             Boolean                  @default(true)
  locked                 Boolean                  @default(true)
  region                 Int?
  cost                  Float?                   @default(0)
  AgentsMaintenance      AgentsMaintenance?       @relation(fields: [responsable], references: [agent_id], onDelete: NoAction, onUpdate: NoAction)
  Region                 Region?                  @relation(fields: [region], references: [region_id], onDelete: NoAction, onUpdate: NoAction)
  type_car               VehiculeType?            @relation(fields: [type_vehicule], references: [type_id], onDelete: NoAction, onUpdate: NoAction)
  Panne                  Panne[]
  Reservations           Reservations[]
  VehiculesStatus        VehiculesStatus[]
  VehiculesStatusHistory VehiculesStatusHistory[]
  DemandesSupport        DemandesSupport[]
}

model VehiculeType {
  type_id        Int         @id @default(autoincrement())
  type           String?     @unique
  price_per_hour Float       @default(0)
  vehicules      Vehicules[]
}

model Region {
  region_id         Int                 @id @default(autoincrement())
  region_name       String              @unique
  vehicules         Vehicules[]
  ReservationRegion ReservationRegion[]
}

model ReservationRegion {
  id             Int          @id @default(autoincrement())
  region_id      Int
  reservation_id Int
  Region         Region       @relation(fields: [region_id], references: [region_id], onDelete: NoAction, onUpdate: NoAction)
  Reservation    Reservations @relation(fields: [reservation_id], references: [reservation_id], onDelete: NoAction, onUpdate: NoAction)
}

model VehiculesStatus {
  matricule       String    @unique
  collection_time DateTime  @default(now())
  temperature     Float?
  speed           Float?
  charge          Float?
  lat             Float?
  long            Float?
  Vehicules       Vehicules @relation(fields: [matricule], references: [matricule], onDelete: NoAction, onUpdate: NoAction)
}

model VehiculesStatusHistory {
  matricule       String
  collection_time DateTime  @default(now())
  temperature     Float?
  speed           Float?
  charge          Float?
  lat             Float?
  long            Float?
  Vehicules       Vehicules @relation(fields: [matricule], references: [matricule], onDelete: NoAction, onUpdate: NoAction)

  @@unique([matricule, collection_time])
}

model Token {
  id                Int                @id @default(autoincrement())
  id_locataire      Int?
  id_AM             Int?
  id_admin          Int?
  id_decideur       Int?
  email             String?            @db.VarChar
  token             String
  createdAt         DateTime           @default(now())
  AgentsMaintenance AgentsMaintenance? @relation(fields: [id_AM], references: [agent_id], onDelete: NoAction, onUpdate: NoAction)
  Admins            Admins?            @relation(fields: [id_admin], references: [admin_id], onDelete: NoAction, onUpdate: NoAction)
  Decideurs         Decideurs?         @relation(fields: [id_decideur], references: [decideur_id], onDelete: NoAction, onUpdate: NoAction)
  Locataires        Locataires?        @relation(fields: [id_locataire], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

enum VehicleState {
  WORKING
  OUTOFORDER
}

model NotificationsAMToken {
  id       Int     @id @default(autoincrement())
  agent_id Int?
  token    String?
}
